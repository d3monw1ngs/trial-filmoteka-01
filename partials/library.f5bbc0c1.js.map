{"mappings":"AAEAA,SAASC,iBAAiB,oBAAoB,WAC9C,MAAMC,EAAaF,SAASG,eAAe,eACrCC,EAAWJ,SAASG,eAAe,aACnCE,EAAkBL,SAASM,cAAc,YAC/C,IAAIC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,kBAChDC,EAAeJ,KAAKC,MAAMC,aAAaC,QAAQ,gBAEnD,SAASE,EAAmBC,EAAeC,GACvCL,aAAaM,QAAQ,gBAAiBR,KAAKS,UAAUH,IACrDJ,aAAaM,QAAQ,cAAeR,KAAKS,UAAUF,G,CA2CvDG,eAAeC,EAAoBC,GAC/BC,QAAQC,IAAI,YAAaF,GACzB,MAEMG,EAAM,sCAAqBH,6CAE3BI,QAAiBC,MAAMF,GACvBG,QAAqBF,EAASG,OAEpC,OADAN,QAAQC,IAAI,gBAAiBI,GACtBA,C,CAWX,SAASE,EAAmBC,GACxB,MAAMC,EAAU9B,SAAS+B,cAAc,OACvC,GAAI1B,EASJ,OALAyB,EAAQE,UAAUC,IAAI,SACtBH,EAAQI,UAAY,uBACJL,EAAMM,YAlFV,kCAkFkCN,EAAMM,YAAc,yDACxDN,EAAMO,mBAETN,EARHT,QAAQgB,MAAM,+B,CAWtB,SAASC,EAAelB,GACpB,OAAQmB,MAAMnB,E,EA9DlBF,eAA4BsB,GAExB,GADAnB,QAAQC,IAAI,mBAAoBjB,IAC5BA,EAEA,YADAgB,QAAQgB,MAAM,+BAGlBhC,EAAgB6B,UAAY,GAC5B,IAAM,MAAMd,KAAWoB,EACnB,IACI,IAAIpB,IAAYkB,EAAelB,GAAU,CACrCC,QAAQoB,KAAK,qBAAqBrB,KAClC,Q,CAEJ,MACMsB,EAAed,QADDT,EAAoBC,IAExCf,EAAgBsC,YAAYD,E,CAC9B,MAAOL,GACgB,qBAAlBA,EAAMO,QACLvB,QAAQoB,KAAK,iBAAiBrB,gBAE9BC,QAAQgB,MAAM,2BAA4BA,E,EAjC1DQ,CAAatC,GAEbL,EAAWD,iBAAiB,SAAS,SAAS6C,GAC1CA,EAAEC,iBACFlC,EAAmBN,EAAeK,E,IAGtCR,EAASH,iBAAiB,SAAS,SAAS6C,GACxCA,EAAEC,iBACFlC,EAAmBN,EAAeK,E","sources":["src/js/library.js"],"sourcesContent":["const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\ndocument.addEventListener('DOMContentLoaded', function () {\nconst watchedBtn = document.getElementById('watched-btn');\nconst queueBtn = document.getElementById('queue-btn');\nconst moviesContainer = document.querySelector('.gallery');\nlet watchedMovies = JSON.parse(localStorage.getItem('movie-watched'));\nlet queuedMovies = JSON.parse(localStorage.getItem('movie-queue'));\n\nfunction updateLocalStorage(watchedMovies, queuedMovies) {\n    localStorage.setItem('movie-watched', JSON.stringify(watchedMovies));\n    localStorage.setItem('movie-queue', JSON.stringify(queuedMovies));\n}\n\ngetLibMovies(watchedMovies);\n\nwatchedBtn.addEventListener('click', function(e) {\n    e.preventDefault();\n    updateLocalStorage(watchedMovies, queuedMovies);\n});\n\nqueueBtn.addEventListener('click', function(e) {\n    e.preventDefault();\n    updateLocalStorage(watchedMovies, queuedMovies);\n});\n\n// Load movies whose Ids matched with those stored in the localStorage\nasync function getLibMovies(array) {\n    console.log('moviesContainer:', moviesContainer);\n    if(!moviesContainer) {\n        console.error('Movies container not found.');\n        return;    \n    }\n    moviesContainer.innerHTML = '';\n    for ( const movieId of array ) {\n        try {\n            if(!movieId || !isValidMovieId(movieId)) {\n                console.warn(`Invalid movie ID: ${movieId}`);\n                continue;\n            }\n            const movie = await getMovieDetailsById(movieId);\n            const movieElement = createMovieElement(movie);\n            moviesContainer.appendChild(movieElement);\n        } catch (error) {\n            if(error.message === 'Movie not found.') {\n                console.warn(`Movie with ID ${movieId} not found.`);\n            } else {\n                console.error('Failed to display movie:', error);\n            }\n        }\n    }\n}\n\n// Requesting movies using IDs\nasync function getMovieDetailsById(movieId) {\n    console.log('Movie ID:', movieId);\n    const API_KEY = \"b5e824a3d922f68ba211fcf6dbdcb6f5\";\n    const BASE_URL = 'https://api.themoviedb.org/3';\n    const url = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`;\n\n    const response = await fetch(url);\n    const movieDetails = await response.json();\n    console.log('API Response:', movieDetails);\n    return movieDetails;\n    // if (!response.ok) {\n    //     if(response.status === 404) {\n    //         throw new Error('Movie not found.');\n    //     } else {\n    //         throw new Error('Failed to fetch movie details: ' + response.statusText);\n    //     }\n    // }\n}\n\n// Create movie display\nfunction createMovieElement(movie) {\n    const element = document.createElement('div');\n    if(!moviesContainer) {\n        console.error('Gallery container not found.');\n        return;\n    }\n    element.classList.add('movie');\n    element.innerHTML = `\n        <img src=\"${movie.poster_path ? IMG_URL + movie.poster_path : 'http://via.placeholder.com/1080x1500'}\";\n        <h3>${movie.title}</h3>\n    `;\n    return element;\n}\n\nfunction isValidMovieId(movieId) {\n    return !isNaN(movieId);\n}\n});\n\n// =====================================================\n// function localSetter() {\n//     let watchlist = localStorage.getItem(\"movie-watched\");\n//     let queuelist = localStorage.getItem(\"movie-queue\");\n    \n//     if (watchlist === null) {\n//       localStorage.setItem(\"watchList\", \"[]\");\n      \n//     }\n//     if (queuelist === null) {\n//       localStorage.setItem(\"queueList\", \"[]\");    \n//     }\n//   }"],"names":["document","addEventListener","watchedBtn","getElementById","queueBtn","moviesContainer","querySelector","watchedMovies1","JSON","parse","localStorage","getItem","queuedMovies1","updateLocalStorage","watchedMovies","queuedMovies","setItem","stringify","async","getMovieDetailsById","movieId","console","log","url","response","fetch","movieDetails","json","createMovieElement","movie","element","createElement","classList","add","innerHTML","poster_path","title","error","isValidMovieId","isNaN","array","warn","movieElement","appendChild","message","getLibMovies","e","preventDefault"],"version":3,"file":"library.f5bbc0c1.js.map"}